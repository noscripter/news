[
    
    {
        "id" : 302183,
        "title" : "PHP 程序员突然离职,隔一天就走了,没有交接,没有文档,现在他找我要这个月工资,求大家给个看法！",
        "url" : "http://www.v2ex.com/t/302183",
        "content" : "如题,他一个负责后端这块,现在走了整个公司都停下来了,都等着人写接口.如此的蛋疼.",
        "content_rendered" : "\u003Cp\u003E如题,他一个负责后端这块,现在走了整个公司都停下来了,都等着人写接口.如此的蛋疼.\u003C/p\u003E\u000A",
        "replies" : 97,
        "member" : {
            "id" : 147760,
            "username" : "zcg121314",
            "tagline" : "",
            "avatar_mini" : "//cdn.v2ex.co/avatar/83ff/bae4/147760_mini.png?m=1470583981",
            "avatar_normal" : "//cdn.v2ex.co/avatar/83ff/bae4/147760_normal.png?m=1470583981",
            "avatar_large" : "//cdn.v2ex.co/avatar/83ff/bae4/147760_large.png?m=1470583981"
        },
        "node" : {
            "id" : 300,
            "name" : "programmer",
            "title" : "程序员",
            "title_alternative" : "Programmer",
            "url" : "http://www.v2ex.com/go/programmer",
            "topics" : 13019,
            "avatar_mini" : "//cdn.v2ex.co/navatar/94f6/d7e0/300_mini.png?m=1472189973",
            "avatar_normal" : "//cdn.v2ex.co/navatar/94f6/d7e0/300_normal.png?m=1472189973",
            "avatar_large" : "//cdn.v2ex.co/navatar/94f6/d7e0/300_large.png?m=1472189973"
        },
        "created" : 1472303942,
        "last_modified" : 1472303942,
        "last_touched" : 1472353902
    },
    
    {
        "id" : 302165,
        "title" : "这世界上怕就怕认真二字",
        "url" : "http://www.v2ex.com/t/302165",
        "content" : "徐玉玉电信诈骗案告破\u000D\u000A\u000D\u000A据山东临沂市公安局 26 日消息，临沂罗庄女孩徐玉玉电信诈骗案已告破，主要犯罪嫌疑人熊超（男， 19 岁，重庆丰都人）、郑金锋（男， 29 岁，福建永春人）、陈福地（男， 29 岁，福建安溪人）、黄进春（男， 35 岁，福建安溪人） 4 人被抓获，其他犯罪嫌疑人正在追捕中。另临沭宋振宁被骗案侦破工作取得重大进展，已锁定 2 名犯罪嫌疑人，抓捕及相关工作正在进行中。\u000D\u000A\u000D\u000A\u000D\u000A [公安部 A 级通缉令通缉徐玉玉案 3 名在逃人员] 据 @公安部刑侦局： 8 月 19 日，犯罪嫌疑人陈文辉等人冒充教育局干部，以发放助学金的名义骗取山东省临沂市群众徐某 9900 元。现犯罪嫌疑人陈福地、郑金锋、黄进春已被抓获，犯罪嫌疑人陈文辉、熊超、郑贤聪三人在逃。 现公安部发布 A 级通缉令缉拿此三人。\u000D\u000A\u000D\u000A这劲头如果推广一下，不愁电信骗子不绝户。",
        "content_rendered" : "\u003Cp\u003E徐玉玉电信诈骗案告破\u003C/p\u003E\u000A\u003Cp\u003E据山东临沂市公安局 26 日消息，临沂罗庄女孩徐玉玉电信诈骗案已告破，主要犯罪嫌疑人熊超（男， 19 岁，重庆丰都人）、郑金锋（男， 29 岁，福建永春人）、陈福地（男， 29 岁，福建安溪人）、黄进春（男， 35 岁，福建安溪人） 4 人被抓获，其他犯罪嫌疑人正在追捕中。另临沭宋振宁被骗案侦破工作取得重大进展，已锁定 2 名犯罪嫌疑人，抓捕及相关工作正在进行中。\u003C/p\u003E\u000A\u003Cp\u003E[公安部 A 级通缉令通缉徐玉玉案 3 名在逃人员] 据 @公安部刑侦局： 8 月 19 日，犯罪嫌疑人陈文辉等人冒充教育局干部，以发放助学金的名义骗取山东省临沂市群众徐某 9900 元。现犯罪嫌疑人陈福地、郑金锋、黄进春已被抓获，犯罪嫌疑人陈文辉、熊超、郑贤聪三人在逃。 现公安部发布 A 级通缉令缉拿此三人。\u003C/p\u003E\u000A\u003Cp\u003E这劲头如果推广一下，不愁电信骗子不绝户。\u003C/p\u003E\u000A",
        "replies" : 78,
        "member" : {
            "id" : 128984,
            "username" : "ilikekindle",
            "tagline" : "https://www.uber.com.cn/invite/uber009",
            "avatar_mini" : "//cdn.v2ex.co/gravatar/7c7a7e0d3179803550e8c35ad4a9324a?s=24&d=retro",
            "avatar_normal" : "//cdn.v2ex.co/gravatar/7c7a7e0d3179803550e8c35ad4a9324a?s=48&d=retro",
            "avatar_large" : "//cdn.v2ex.co/gravatar/7c7a7e0d3179803550e8c35ad4a9324a?s=73&d=retro"
        },
        "node" : {
            "id" : 16,
            "name" : "share",
            "title" : "分享发现",
            "title_alternative" : "Share",
            "url" : "http://www.v2ex.com/go/share",
            "topics" : 20063,
            "avatar_mini" : "//cdn.v2ex.co/navatar/c74d/97b0/16_mini.png?m=1471551794",
            "avatar_normal" : "//cdn.v2ex.co/navatar/c74d/97b0/16_normal.png?m=1471551794",
            "avatar_large" : "//cdn.v2ex.co/navatar/c74d/97b0/16_large.png?m=1471551794"
        },
        "created" : 1472293742,
        "last_modified" : 1472293742,
        "last_touched" : 1472354317
    },
    
    {
        "id" : 302097,
        "title" : "学习前端半年的感悟 \u002D\u002D\u002D 大坑",
        "url" : "http://www.v2ex.com/t/302097",
        "content" : "好多坑\u000D\u000A\u002D\u002D\u002D\u000D\u000A### html 和 css\u000D\u000A比如一个 div 的`width`设为`100px`, 加个`border: 2px solid black`, 宽度就变成了`104px` \u000D\u000A\u000D\u000A比如弄个导航栏, `ul`下有几个`li`, 如果你给`li`设置为 inline\u002Dblock, 好了, 每个\u0027li\u0027之间很有可能会有空隙, 去网上找答案竟然有人告诉你在 html 写的时候, 每个`\u003Cli\u003E`不能换行, 还不告诉你原因! \u000D\u000A\u000D\u000Aps: 当然最后都弄明白了啊\u000D\u000A\u000D\u000A### js\u000D\u000Aes6 大法好啊! 但是, 麻烦先用 babel 转换, 不然 chrome 也看!不!懂! 配完 babel 你以为完了? 不, 你要开始考虑调试的问题了, 人家跟你说, 用 sourcemap 啊. 等你真的用上了 sourcemap 就发现, 怎么单步调试一卡一卡的? 有时候还跳错地方了! 然后又要回到配置文件的深渊....\u000D\u000A\u000D\u000A另外, js 没有变量类型, 比如说, 修改 style 的时候, 它需要一个字符串, 你传个数字, 他照样工作不报错, 我已经忘了多少次忘记加`px`而调试调半天\u000D\u000A\u000D\u000A### 学习难度\u000D\u000A说前端简单了给我站出来. 先不说那几本可以砸死人的经典, 前端要学好, 英语必须先好啊. 遇到问题, 往往是用英文搜索更容易得到解答. \u000D\u000A\u000D\u000A如果你死活要用中文? 举个例子, `w3cschool.com.cn`是**李鬼**, 真正的 w3cschool 是`w3cschools.com`, 纯英的, 要翻墙才能上, 当然也有翻译版本\u000D\u000A\u000D\u000A再比如说慕课网上的视频教程, 要用 js 做一个轮播图, 作者用 dw 作为编辑器, 然后还用 setTimout 实现动画, 这我不多说, 毕竟年代有点远. 但是让我无法接受的是, 作者连续点击下一张按钮, 结果图片转换动画不正常, 作者对此的解释是:\u0022内存不足\u0022, excuse me? 不是你点太快了结果两个动画效果重叠到一块了么?\u000D\u000A\u000D\u000A用纯中文学前端真心是地狱难度, 被各种带偏.....\u000D\u000A\u000D\u000A此外, 前端要学的东西, 太多太多太多了. 不是说新框架, 而是基础知识多而杂, 我就学了半年, leanote 记下的笔记都超过 100 了, 而且大部分都是长笔记.(嗯...好像也不算多, 一天一篇都没有)\u000D\u000A\u000D\u000A\u000D\u000A### 工作与薪酬\u000D\u000A**并不高**! 至少应届毕业生里面, java 招的人多, 而且工资高多了.\u000D\u000A\u000D\u000A半年后我总算明白了你们口中**靠谱的前端**是什么意思了, 即: **有工作经验能打能扛得资深前端**, 至于**新手从来就不缺**, 所谓前端火, 真的和我这种小透明没个卵关系.......\u000D\u000A\u000D\u000A半年收获\u000D\u000A\u002D\u002D\u002D\u002D\u000D\u000A\u002D 要静下心才能做技术, 抱着浮躁的心情转来学前端(导师的之前接活的方向是图像处理), 在阿里面试的时候被鄙视在知道自己学得有多肤浅, 一定要深究啊\u000D\u000A\u000D\u000A\u002D 终于学会了读文档学习, 比如说, 要学习 vuejs, 以前是搜索: `vue 入门 教程`或者`vue 实例 教程`, 现在去 vue 官网看着 example 对着 document 学, 前期基础积累够了, 然后静下心, 自然就能做到了.\u000D\u000A\u000D\u000A如果你要入前端坑\u000D\u000A\u002D\u002D\u002D\u002D\u000D\u000A\u002D 找个人带你\u000D\u000A\u002D 学好英文还有舍得花钱买书\u000D\u000A\u002D 还是个菜鸡就不要碰 webpack, babel, 一知半解浪费自己的人生\u000D\u000A\u002D 要有爱, 分分钟那个相对路径绝对路径都分不清的同学都能拿到碾压你的 offer\u000D\u000A\u000D\u000A疑惑\u000D\u000A\u002D\u002D\u002D\u002D\u000D\u000A1. 暑假私人原因没有出去实习, 没有具体项目经验是不是找工作很吃亏?\u000D\u000A\u000D\u000A2. 没有项目机会, 阅读框架代码是否可以为我简历增色?\u000D\u000A\u000D\u000A3. 文中内容是否很肤浅, 让你很有教育下年轻人的冲动?\u000D\u000A\u000D\u000A背景: 跨专业 211 小硕, 本科四年浑浑噩噩, 硕士三年还债中.\u000D\u000A\u000D\u000Aps: github 就不放了, 当初扔简历上被鄙视了一番, 哎......",
        "content_rendered" : "\u003Ch2\u003E好多坑\u003C/h2\u003E\u000A\u003Ch3\u003Ehtml 和 css\u003C/h3\u003E\u000A\u003Cp\u003E比如一个 div 的\u003Ccode\u003Ewidth\u003C/code\u003E设为\u003Ccode\u003E100px\u003C/code\u003E, 加个\u003Ccode\u003Eborder: 2px solid black\u003C/code\u003E, 宽度就变成了\u003Ccode\u003E104px\u003C/code\u003E\u003C/p\u003E\u000A\u003Cp\u003E比如弄个导航栏, \u003Ccode\u003Eul\u003C/code\u003E下有几个\u003Ccode\u003Eli\u003C/code\u003E, 如果你给\u003Ccode\u003Eli\u003C/code\u003E设置为 inline\u002Dblock, 好了, 每个\u0027li\u0027之间很有可能会有空隙, 去网上找答案竟然有人告诉你在 html 写的时候, 每个\u003Ccode\u003E\u0026lt\u003Bli\u0026gt\u003B\u003C/code\u003E不能换行, 还不告诉你原因!\u003C/p\u003E\u000A\u003Cp\u003Eps: 当然最后都弄明白了啊\u003C/p\u003E\u000A\u003Ch3\u003Ejs\u003C/h3\u003E\u000A\u003Cp\u003Ees6 大法好啊! 但是, 麻烦先用 babel 转换, 不然 chrome 也看!不!懂! 配完 babel 你以为完了? 不, 你要开始考虑调试的问题了, 人家跟你说, 用 sourcemap 啊. 等你真的用上了 sourcemap 就发现, 怎么单步调试一卡一卡的? 有时候还跳错地方了! 然后又要回到配置文件的深渊....\u003C/p\u003E\u000A\u003Cp\u003E另外, js 没有变量类型, 比如说, 修改 style 的时候, 它需要一个字符串, 你传个数字, 他照样工作不报错, 我已经忘了多少次忘记加\u003Ccode\u003Epx\u003C/code\u003E而调试调半天\u003C/p\u003E\u000A\u003Ch3\u003E学习难度\u003C/h3\u003E\u000A\u003Cp\u003E说前端简单了给我站出来. 先不说那几本可以砸死人的经典, 前端要学好, 英语必须先好啊. 遇到问题, 往往是用英文搜索更容易得到解答.\u003C/p\u003E\u000A\u003Cp\u003E如果你死活要用中文? 举个例子, \u003Ccode\u003E\u003Ca href\u003D\u0022http://w3cschool.com.cn\u0022 rel\u003D\u0022nofollow\u0022\u003Ew3cschool.com.cn\u003C/a\u003E\u003C/code\u003E是\u003Cstrong\u003E李鬼\u003C/strong\u003E, 真正的 w3cschool 是\u003Ccode\u003E\u003Ca href\u003D\u0022http://w3cschools.com\u0022 rel\u003D\u0022nofollow\u0022\u003Ew3cschools.com\u003C/a\u003E\u003C/code\u003E, 纯英的, 要翻墙才能上, 当然也有翻译版本\u003C/p\u003E\u000A\u003Cp\u003E再比如说慕课网上的视频教程, 要用 js 做一个轮播图, 作者用 dw 作为编辑器, 然后还用 setTimout 实现动画, 这我不多说, 毕竟年代有点远. 但是让我无法接受的是, 作者连续点击下一张按钮, 结果图片转换动画不正常, 作者对此的解释是:\u0022内存不足\u0022, excuse me? 不是你点太快了结果两个动画效果重叠到一块了么?\u003C/p\u003E\u000A\u003Cp\u003E用纯中文学前端真心是地狱难度, 被各种带偏.....\u003C/p\u003E\u000A\u003Cp\u003E此外, 前端要学的东西, 太多太多太多了. 不是说新框架, 而是基础知识多而杂, 我就学了半年, leanote 记下的笔记都超过 100 了, 而且大部分都是长笔记.(嗯...好像也不算多, 一天一篇都没有)\u003C/p\u003E\u000A\u003Ch3\u003E工作与薪酬\u003C/h3\u003E\u000A\u003Cp\u003E\u003Cstrong\u003E并不高\u003C/strong\u003E! 至少应届毕业生里面, java 招的人多, 而且工资高多了.\u003C/p\u003E\u000A\u003Cp\u003E半年后我总算明白了你们口中\u003Cstrong\u003E靠谱的前端\u003C/strong\u003E是什么意思了, 即: \u003Cstrong\u003E有工作经验能打能扛得资深前端\u003C/strong\u003E, 至于\u003Cstrong\u003E新手从来就不缺\u003C/strong\u003E, 所谓前端火, 真的和我这种小透明没个卵关系.......\u003C/p\u003E\u000A\u003Ch2\u003E半年收获\u003C/h2\u003E\u000A\u003Cul\u003E\u000A\u003Cli\u003E\u000A\u003Cp\u003E要静下心才能做技术, 抱着浮躁的心情转来学前端(导师的之前接活的方向是图像处理), 在阿里面试的时候被鄙视在知道自己学得有多肤浅, 一定要深究啊\u003C/p\u003E\u000A\u003C/li\u003E\u000A\u003Cli\u003E\u000A\u003Cp\u003E终于学会了读文档学习, 比如说, 要学习 vuejs, 以前是搜索: \u003Ccode\u003Evue 入门 教程\u003C/code\u003E或者\u003Ccode\u003Evue 实例 教程\u003C/code\u003E, 现在去 vue 官网看着 example 对着 document 学, 前期基础积累够了, 然后静下心, 自然就能做到了.\u003C/p\u003E\u000A\u003C/li\u003E\u000A\u003C/ul\u003E\u000A\u003Ch2\u003E如果你要入前端坑\u003C/h2\u003E\u000A\u003Cul\u003E\u000A\u003Cli\u003E找个人带你\u003C/li\u003E\u000A\u003Cli\u003E学好英文还有舍得花钱买书\u003C/li\u003E\u000A\u003Cli\u003E还是个菜鸡就不要碰 webpack, babel, 一知半解浪费自己的人生\u003C/li\u003E\u000A\u003Cli\u003E要有爱, 分分钟那个相对路径绝对路径都分不清的同学都能拿到碾压你的 offer\u003C/li\u003E\u000A\u003C/ul\u003E\u000A\u003Ch2\u003E疑惑\u003C/h2\u003E\u000A\u003Col\u003E\u000A\u003Cli\u003E\u000A\u003Cp\u003E暑假私人原因没有出去实习, 没有具体项目经验是不是找工作很吃亏?\u003C/p\u003E\u000A\u003C/li\u003E\u000A\u003Cli\u003E\u000A\u003Cp\u003E没有项目机会, 阅读框架代码是否可以为我简历增色?\u003C/p\u003E\u000A\u003C/li\u003E\u000A\u003Cli\u003E\u000A\u003Cp\u003E文中内容是否很肤浅, 让你很有教育下年轻人的冲动?\u003C/p\u003E\u000A\u003C/li\u003E\u000A\u003C/ol\u003E\u000A\u003Cp\u003E背景: 跨专业 211 小硕, 本科四年浑浑噩噩, 硕士三年还债中.\u003C/p\u003E\u000A\u003Cp\u003Eps: github 就不放了, 当初扔简历上被鄙视了一番, 哎......\u003C/p\u003E\u000A",
        "replies" : 42,
        "member" : {
            "id" : 78820,
            "username" : "fulvaz",
            "tagline" : "",
            "avatar_mini" : "//cdn.v2ex.co/avatar/e689/5a4a/78820_mini.png?m=1471622359",
            "avatar_normal" : "//cdn.v2ex.co/avatar/e689/5a4a/78820_normal.png?m=1471622359",
            "avatar_large" : "//cdn.v2ex.co/avatar/e689/5a4a/78820_large.png?m=1471622359"
        },
        "node" : {
            "id" : 791,
            "name" : "fe",
            "title" : "前端开发",
            "title_alternative" : "Frontend",
            "url" : "http://www.v2ex.com/go/fe",
            "topics" : 515,
            "avatar_mini" : "//cdn.v2ex.co/navatar/df7f/28ac/791_mini.png?m=1437521471",
            "avatar_normal" : "//cdn.v2ex.co/navatar/df7f/28ac/791_normal.png?m=1437521471",
            "avatar_large" : "//cdn.v2ex.co/navatar/df7f/28ac/791_large.png?m=1437521471"
        },
        "created" : 1472268011,
        "last_modified" : 1472270738,
        "last_touched" : 1472325419
    },
    
    {
        "id" : 302179,
        "title" : "C++ 17 写法上已经很接近 python 了",
        "url" : "http://www.v2ex.com/t/302179",
        "content" : "# list 和 map\u000D\u000A\u000D\u000A本节例子选自： https://gist.github.com/JeffPaine/6213790\u000D\u000A\u000D\u000A对 python 这样的动态语言最直观的感受就是 list/map 两种数据结构打天下。 php 和 lua 甚至把这两个都合并成一种数据结构了。\u000D\u000A毋庸置疑，学会如何使用 list 和 map 是基础中的基础。\u000D\u000A\u000D\u000A## for 循环\u000D\u000A\u000D\u000APython 版本\u000D\u000A\u000D\u000A```python\u000D\u000Aimport unittest\u000D\u000A\u000D\u000Aclass Test(unittest.TestCase):\u000D\u000A    def test_foreach_on_lazy_range(self):\u000D\u000A        for i in xrange(6):\u000D\u000A            print i ** 2\u000D\u000A```\u000D\u000A\u000D\u000AC++ 版本\u000D\u000A\u000D\u000A```c++\u000D\u000A#include \u003Ccatch_with_main.hpp\u003E\u000D\u000A#include \u003Crange/v3/all.hpp\u003E\u000D\u000A\u000D\u000Ausing namespace ranges\u003B\u000D\u000A\u000D\u000ATEST_CASE(\u0022foreach on lazy range\u0022) {\u000D\u000A    for(const auto\u0026 x : view::ints(0, 6)) {\u000D\u000A        std::cout \u003C\u003C x * x \u003C\u003C std::endl\u003B\u000D\u000A    }\u000D\u000A}\u000D\u000A```\u000D\u000A\u000D\u000A注意到 `const auto\u0026` 的写法，这个表示我对这个变量进行只读的使用。只要是能用 const 的地方就用 const （\u000D\u000Ahttp://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#a\u002Dnamerconst\u002Dimmutableacon1\u002Dby\u002Ddefault\u002Dmake\u002Dobjects\u002Dimmutable ）。\u000D\u000A为什么还需要加上 reference ？因为非 reference 的版本默认的语义我要拥有这个变量（ make a copy ）。而在 for 循环下我们显然是只打算使用这个变量，\u000D\u000A而不是去拥有一份。为什么不用指针而用引用？因为指针可空， reference 不可空。\u000D\u000A\u000D\u000A`view::ints` 是 range\u002Dv3 这个库提供的，作用等同于 xrange 。将来 range\u002Dv3 会成为标准库的一部分。\u000D\u000A\u000D\u000A## foreach\u000D\u000A\u000D\u000APython 版本\u000D\u000A\u000D\u000A```python\u000D\u000Aimport unittest\u000D\u000A\u000D\u000Aclass Test(unittest.TestCase):\u000D\u000A    def test_foreach_on_list(self):\u000D\u000A        colors \u003D [\u0027red\u0027, \u0027green\u0027, \u0027blue\u0027, \u0027yellow\u0027]\u000D\u000A        for color in colors:\u000D\u000A            print color\u000D\u000A```\u000D\u000A\u000D\u000AC++ 版本\u000D\u000A\u000D\u000A```c++\u000D\u000A#include \u003Ccatch_with_main.hpp\u003E\u000D\u000A\u000D\u000Ausing namespace ranges\u003B\u000D\u000A\u000D\u000ATEST_CASE(\u0022foreach on list\u0022) {\u000D\u000A    auto colors \u003D {\u0022red\u0022, \u0022green\u0022, \u0022blue\u0022, \u0022yellow\u0022}\u003B\u000D\u000A    for(const auto\u0026 color : colors) {\u000D\u000A        std::cout \u003C\u003C color \u003C\u003C std::endl\u003B\u000D\u000A    }\u000D\u000A}\u000D\u000A```\u000D\u000A\u000D\u000A与 python 不同， c++没有所谓的默认的 list 类型。上面的写法是最简洁的写法。 colors 变量的实际类型\u000D\u000A根据 GDB 是 `std::initializer_list\u003Cconst char*\u003E`。只有 begin ， end ， size 几个函数。实际上类似于 python 的 tuple 。\u000D\u000A考虑到 python 的 list 类型是 mutable 的，所以更合适的实现是 std::vector 。\u000D\u000A\u000D\u000A```c++\u000D\u000A#include \u003Ccatch_with_main.hpp\u003E\u000D\u000A\u000D\u000Ausing namespace ranges\u003B\u000D\u000A\u000D\u000ATEST_CASE(\u0022foreach on vector\u0022) {\u000D\u000A    auto colors \u003D std::vector\u003Cconst char*\u003E{\u0022red\u0022, \u0022green\u0022, \u0022blue\u0022, \u0022yellow\u0022}\u003B\u000D\u000A    for(const auto\u0026 color : colors) {\u000D\u000A        std::cout \u003C\u003C color \u003C\u003C std::endl\u003B\u000D\u000A    }\u000D\u000A}\u000D\u000A```\u000D\u000A\u000D\u000A## foreach 倒序\u000D\u000A\u000D\u000APython 版本\u000D\u000A\u000D\u000A```python\u000D\u000Aimport unittest\u000D\u000A\u000D\u000Aclass Test(unittest.TestCase):\u000D\u000A\u000D\u000A    def test_foreach_reversed(self):\u000D\u000A        colors \u003D [\u0027red\u0027, \u0027green\u0027, \u0027blue\u0027, \u0027yellow\u0027]\u000D\u000A        for color in reversed(colors):\u000D\u000A            print(color)\u000D\u000A```\u000D\u000A\u000D\u000AC++ 版本\u000D\u000A\u000D\u000A```c++\u000D\u000A#include \u003Ccatch_with_main.hpp\u003E\u000D\u000A#include \u003Crange/v3/all.hpp\u003E\u000D\u000A\u000D\u000Ausing namespace ranges\u003B\u000D\u000A\u000D\u000ATEST_CASE(\u0022foreach reversed\u0022) {\u000D\u000A    auto colors \u003D std::vector\u003Cconst char*\u003E{\u0022red\u0022, \u0022green\u0022, \u0022blue\u0022, \u0022yellow\u0022}\u003B\u000D\u000A    for(const auto\u0026 color : colors | view::reverse) {\u000D\u000A        std::cout \u003C\u003C color \u003C\u003C std::endl\u003B\u000D\u000A    }\u000D\u000A}\u000D\u000A```\u000D\u000A\u000D\u000A这里使用了 range\u002Dv3 的 view 组合，类似 unix pipe 的语法。\u000D\u000A\u000D\u000A## foreach 带下标\u000D\u000A\u000D\u000APython 版本\u000D\u000A\u000D\u000A```python\u000D\u000Aimport unittest\u000D\u000A\u000D\u000Aclass Test(unittest.TestCase):\u000D\u000A    def test_foreach_with_index(self):\u000D\u000A        colors \u003D [\u0027red\u0027, \u0027green\u0027, \u0027blue\u0027, \u0027yellow\u0027]\u000D\u000A        for i, color in enumerate(colors):\u000D\u000A            print(i, color)\u000D\u000A```\u000D\u000A\u000D\u000AC++ 版本\u000D\u000A\u000D\u000A```c++\u000D\u000A#include \u003Ccatch_with_main.hpp\u003E\u000D\u000A#include \u003Crange/v3/all.hpp\u003E\u000D\u000A\u000D\u000Ausing namespace ranges\u003B\u000D\u000A\u000D\u000ATEST_CASE(\u0022foreach with index\u0022) {\u000D\u000A    auto colors \u003D std::vector\u003Cconst char*\u003E{\u0022red\u0022, \u0022green\u0022, \u0022blue\u0022, \u0022yellow\u0022}\u003B\u000D\u000A    for(const auto\u0026 [i, color] : view::zip(view::iota(0), colors)) {\u000D\u000A        std::cout \u003C\u003C i \u003C\u003C \u0022 \u0022 \u003C\u003C color \u003C\u003C std::endl\u003B\u000D\u000A    }\u000D\u000A}\u000D\u000A```\u000D\u000A\u000D\u000A`view::iota`这个的意思是产生一个从 n 开始的逐个加一的 view ，类似 python 里的 generator 。然后 zip 是把两个 view 逐个对应起来合并成一个 pair 的 view 。\u000D\u000A然后`const auto\u0026 [i, color]`是 c++ 17 的 structured bindings 的写法，和 python 解开 tuple 里的元素的做法是如出一辙的。\u000D\u000A\u000D\u000A## zip\u000D\u000A\u000D\u000A下面这个例子可以看得更清楚。 Python 版本\u000D\u000A\u000D\u000A```python\u000D\u000Aimport unittest\u000D\u000Aimport itertools\u000D\u000A\u000D\u000Aclass Test(unittest.TestCase):\u000D\u000A    def test_zip(self):\u000D\u000A        names \u003D [\u0027raymond\u0027, \u0027rachel\u0027, \u0027matthew\u0027]\u000D\u000A        colors \u003D [\u0027red\u0027, \u0027green\u0027, \u0027blue\u0027, \u0027yellow\u0027]\u000D\u000A        for name, color in itertools.izip(names, colors):\u000D\u000A            print(name, color)\u000D\u000A```\u000D\u000A\u000D\u000Aizip 返回的是 generator 。 zip 返回都是 list 。 C++ 版本\u000D\u000A\u000D\u000A```c++\u000D\u000A#include \u003Ccatch_with_main.hpp\u003E\u000D\u000A#include \u003Crange/v3/all.hpp\u003E\u000D\u000A\u000D\u000Ausing namespace ranges\u003B\u000D\u000A\u000D\u000ATEST_CASE(\u0022zip\u0022) {\u000D\u000A    auto names \u003D std::vector\u003Cconst char*\u003E{\u0022raymond\u0022, \u0022rachel\u0022, \u0022matthew\u0022}\u003B\u000D\u000A    auto colors \u003D std::vector\u003Cconst char*\u003E{\u0022red\u0022, \u0022green\u0022, \u0022blue\u0022, \u0022yellow\u0022}\u003B\u000D\u000A    for(const auto\u0026 [name, color] : view::zip(names, colors)) {\u000D\u000A        std::cout \u003C\u003C name \u003C\u003C \u0022 \u0022 \u003C\u003C color \u003C\u003C std::endl\u003B\u000D\u000A    }\u000D\u000A}\u000D\u000A```\u000D\u000A\u000D\u000A## sorted\u000D\u000A\u000D\u000APython 版本\u000D\u000A\u000D\u000A```python\u000D\u000Aimport unittest\u000D\u000A\u000D\u000Aclass Test(unittest.TestCase):\u000D\u000A    def test_sort(self):\u000D\u000A        colors \u003D [\u0027red\u0027, \u0027green\u0027, \u0027blue\u0027, \u0027yellow\u0027]\u000D\u000A        for color in sorted(colors):\u000D\u000A            print(color)\u000D\u000A```\u000D\u000A\u000D\u000AC++ 版本\u000D\u000A\u000D\u000A```c++\u000D\u000A#include \u003Ccatch_with_main.hpp\u003E\u000D\u000A#include \u003Crange/v3/all.hpp\u003E\u000D\u000A\u000D\u000Ausing namespace ranges\u003B\u000D\u000A\u000D\u000ATEST_CASE(\u0022sort\u0022) {\u000D\u000A    auto colors \u003D std::vector\u003Cstd::string\u003E{\u0022red\u0022, \u0022green\u0022, \u0022blue\u0022, \u0022yellow\u0022}\u003B\u000D\u000A    colors |\u003D action::sort\u003B\u000D\u000A    for(const auto\u0026 color : colors) {\u000D\u000A        std::cout \u003C\u003C color \u003C\u003C std::endl\u003B\u000D\u000A    }\u000D\u000A}\u000D\u000A```\u000D\u000A\u000D\u000A这个例子里`const char*`换成了`std::string`，因为只有字符串类型才知道怎么比较，才能排序。\u000D\u000A`action::sort`与 view 不同，它返回的是具体的 container ，而不再是 view 了。\u000D\u000A\u000D\u000A如果要倒过来排序，再 python 中是这样的\u000D\u000A\u000D\u000A```python\u000D\u000Aimport unittest\u000D\u000A\u000D\u000Aclass Test(unittest.TestCase):\u000D\u000A    def test_sort_reverse(self):\u000D\u000A        colors \u003D [\u0027red\u0027, \u0027green\u0027, \u0027blue\u0027, \u0027yellow\u0027]\u000D\u000A        for color in sorted(colors, reverse\u003DTrue):\u000D\u000A            print(color)\u000D\u000A```\u000D\u000A\u000D\u000AC++ 版本\u000D\u000A\u000D\u000A```c++\u000D\u000A#include \u003Ccatch_with_main.hpp\u003E\u000D\u000A#include \u003Crange/v3/all.hpp\u003E\u000D\u000A\u000D\u000Ausing namespace ranges\u003B\u000D\u000A\u000D\u000ATEST_CASE(\u0022sort reverse\u0022) {\u000D\u000A    auto colors \u003D std::vector\u003Cstd::string\u003E{\u0022red\u0022, \u0022green\u0022, \u0022blue\u0022, \u0022yellow\u0022}\u003B\u000D\u000A    colors |\u003D action::sort(std::greater\u003Cstd::string\u003E())\u003B\u000D\u000A    for(const auto\u0026 color : colors) {\u000D\u000A        std::cout \u003C\u003C color \u003C\u003C std::endl\u003B\u000D\u000A    }\u000D\u000A}\u000D\u000A```\u000D\u000A\u000D\u000APython 还支持指定属性去排序\u000D\u000A\u000D\u000A```python\u000D\u000Aimport unittest\u000D\u000A\u000D\u000Aclass Test(unittest.TestCase):\u000D\u000A\u000D\u000A    def test_custom_sort(self):\u000D\u000A        colors \u003D [\u0027red\u0027, \u0027green\u0027, \u0027blue\u0027, \u0027yellow\u0027]\u000D\u000A        for color in sorted(colors, key\u003Dlambda e: len(e)):\u000D\u000A            print(color)\u000D\u000A```\u000D\u000A\u000D\u000AC++ 版本\u000D\u000A\u000D\u000A```c++\u000D\u000A#include \u003Ccatch_with_main.hpp\u003E\u000D\u000A#include \u003Crange/v3/all.hpp\u003E\u000D\u000A\u000D\u000Ausing namespace ranges\u003B\u000D\u000A\u000D\u000ATEST_CASE(\u0022custom sort\u0022) {\u000D\u000A    auto colors \u003D std::vector\u003Cstd::string\u003E{\u0022red\u0022, \u0022green\u0022, \u0022blue\u0022, \u0022yellow\u0022}\u003B\u000D\u000A    colors |\u003D action::sort(std::less\u003Cstd::string\u003E(), [](const auto\u0026e) {\u000D\u000A        return e.size()\u003B\u000D\u000A    })\u003B\u000D\u000A    for(const auto\u0026 color : colors) {\u000D\u000A        std::cout \u003C\u003C color \u003C\u003C std::endl\u003B\u000D\u000A    }\u000D\u000A}\u000D\u000A```\u000D\u000A\u000D\u000A`sort`的第一个参数是 comparator ，第二个参数是 projector 。这里我们使用了一个 lambda 表达式，从字符串上取得其长度值，用长度去排序。\u000D\u000A\u000D\u000A\u002D\u002D\u002D\u002D\u002D\u002D\u002D\u002D\u002D\u000D\u000A\u000D\u000A需要的编译环境\u000D\u000A\u000D\u000A* 操作系统: ubuntu 14.04\u000D\u000A* 编译器 clang 4.0: http://apt.llvm.org/ 使用 c++ 17\u000D\u000A* cmake: sudo apt\u002Dget install cmake\u000D\u000A* 包管理: git clone 依赖到自己的 repository ，所谓 vendoring\u000D\u000A* IDE clion ： https://www.jetbrains.com/clion/\u000D\u000A* STL: libc++ 3.9\u000D\u000A* range\u002Dv3\u000D\u000A\u000D\u000A参见： https://taowen.gitbooks.io/modern\u002Dcpp\u002Dhowto/content/unit\u002Dtesting/chapter.html",
        "content_rendered" : "\u003Ch1\u003Elist 和 map\u003C/h1\u003E\u000A\u003Cp\u003E本节例子选自： \u003Ca href\u003D\u0022https://gist.github.com/JeffPaine/6213790\u0022 rel\u003D\u0022nofollow\u0022\u003Ehttps://gist.github.com/JeffPaine/6213790\u003C/a\u003E\u003C/p\u003E\u000A\u003Cp\u003E对 python 这样的动态语言最直观的感受就是 list/map 两种数据结构打天下。 php 和 lua 甚至把这两个都合并成一种数据结构了。\u000A毋庸置疑，学会如何使用 list 和 map 是基础中的基础。\u003C/p\u003E\u000A\u003Ch2\u003Efor 循环\u003C/h2\u003E\u000A\u003Cp\u003EPython 版本\u003C/p\u003E\u000A\u003Cpre\u003E\u003Ccode\u003Eimport unittest\u000A\u000Aclass Test(unittest.TestCase):\u000A    def test_foreach_on_lazy_range(self):\u000A        for i in xrange(6):\u000A            print i ** 2\u000A\u003C/code\u003E\u003C/pre\u003E\u000A\u003Cp\u003EC++ 版本\u003C/p\u003E\u000A\u003Cpre\u003E\u003Ccode\u003E#include \u0026lt\u003Bcatch_with_main.hpp\u0026gt\u003B\u000A#include \u0026lt\u003Brange/v3/all.hpp\u0026gt\u003B\u000A\u000Ausing namespace ranges\u003B\u000A\u000ATEST_CASE(\u0022foreach on lazy range\u0022) {\u000A    for(const auto\u0026amp\u003B x : view::ints(0, 6)) {\u000A        std::cout \u0026lt\u003B\u0026lt\u003B x * x \u0026lt\u003B\u0026lt\u003B std::endl\u003B\u000A    }\u000A}\u000A\u003C/code\u003E\u003C/pre\u003E\u000A\u003Cp\u003E注意到 \u003Ccode\u003Econst auto\u0026amp\u003B\u003C/code\u003E 的写法，这个表示我对这个变量进行只读的使用。只要是能用 const 的地方就用 const （\u000A\u003Ca href\u003D\u0022http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#a\u002Dnamerconst\u002Dimmutableacon1\u002Dby\u002Ddefault\u002Dmake\u002Dobjects\u002Dimmutable\u0022 rel\u003D\u0022nofollow\u0022\u003Ehttp://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#a\u002Dnamerconst\u002Dimmutableacon1\u002Dby\u002Ddefault\u002Dmake\u002Dobjects\u002Dimmutable\u003C/a\u003E ）。\u000A为什么还需要加上 reference ？因为非 reference 的版本默认的语义我要拥有这个变量（ make a copy ）。而在 for 循环下我们显然是只打算使用这个变量，\u000A而不是去拥有一份。为什么不用指针而用引用？因为指针可空， reference 不可空。\u003C/p\u003E\u000A\u003Cp\u003E\u003Ccode\u003Eview::ints\u003C/code\u003E 是 range\u002Dv3 这个库提供的，作用等同于 xrange 。将来 range\u002Dv3 会成为标准库的一部分。\u003C/p\u003E\u000A\u003Ch2\u003Eforeach\u003C/h2\u003E\u000A\u003Cp\u003EPython 版本\u003C/p\u003E\u000A\u003Cpre\u003E\u003Ccode\u003Eimport unittest\u000A\u000Aclass Test(unittest.TestCase):\u000A    def test_foreach_on_list(self):\u000A        colors \u003D [\u0027red\u0027, \u0027green\u0027, \u0027blue\u0027, \u0027yellow\u0027]\u000A        for color in colors:\u000A            print color\u000A\u003C/code\u003E\u003C/pre\u003E\u000A\u003Cp\u003EC++ 版本\u003C/p\u003E\u000A\u003Cpre\u003E\u003Ccode\u003E#include \u0026lt\u003Bcatch_with_main.hpp\u0026gt\u003B\u000A\u000Ausing namespace ranges\u003B\u000A\u000ATEST_CASE(\u0022foreach on list\u0022) {\u000A    auto colors \u003D {\u0022red\u0022, \u0022green\u0022, \u0022blue\u0022, \u0022yellow\u0022}\u003B\u000A    for(const auto\u0026amp\u003B color : colors) {\u000A        std::cout \u0026lt\u003B\u0026lt\u003B color \u0026lt\u003B\u0026lt\u003B std::endl\u003B\u000A    }\u000A}\u000A\u003C/code\u003E\u003C/pre\u003E\u000A\u003Cp\u003E与 python 不同， c++没有所谓的默认的 list 类型。上面的写法是最简洁的写法。 colors 变量的实际类型\u000A根据 GDB 是 \u003Ccode\u003Estd::initializer_list\u0026lt\u003Bconst char*\u0026gt\u003B\u003C/code\u003E。只有 begin ， end ， size 几个函数。实际上类似于 python 的 tuple 。\u000A考虑到 python 的 list 类型是 mutable 的，所以更合适的实现是 std::vector 。\u003C/p\u003E\u000A\u003Cpre\u003E\u003Ccode\u003E#include \u0026lt\u003Bcatch_with_main.hpp\u0026gt\u003B\u000A\u000Ausing namespace ranges\u003B\u000A\u000ATEST_CASE(\u0022foreach on vector\u0022) {\u000A    auto colors \u003D std::vector\u0026lt\u003Bconst char*\u0026gt\u003B{\u0022red\u0022, \u0022green\u0022, \u0022blue\u0022, \u0022yellow\u0022}\u003B\u000A    for(const auto\u0026amp\u003B color : colors) {\u000A        std::cout \u0026lt\u003B\u0026lt\u003B color \u0026lt\u003B\u0026lt\u003B std::endl\u003B\u000A    }\u000A}\u000A\u003C/code\u003E\u003C/pre\u003E\u000A\u003Ch2\u003Eforeach 倒序\u003C/h2\u003E\u000A\u003Cp\u003EPython 版本\u003C/p\u003E\u000A\u003Cpre\u003E\u003Ccode\u003Eimport unittest\u000A\u000Aclass Test(unittest.TestCase):\u000A\u000A    def test_foreach_reversed(self):\u000A        colors \u003D [\u0027red\u0027, \u0027green\u0027, \u0027blue\u0027, \u0027yellow\u0027]\u000A        for color in reversed(colors):\u000A            print(color)\u000A\u003C/code\u003E\u003C/pre\u003E\u000A\u003Cp\u003EC++ 版本\u003C/p\u003E\u000A\u003Cpre\u003E\u003Ccode\u003E#include \u0026lt\u003Bcatch_with_main.hpp\u0026gt\u003B\u000A#include \u0026lt\u003Brange/v3/all.hpp\u0026gt\u003B\u000A\u000Ausing namespace ranges\u003B\u000A\u000ATEST_CASE(\u0022foreach reversed\u0022) {\u000A    auto colors \u003D std::vector\u0026lt\u003Bconst char*\u0026gt\u003B{\u0022red\u0022, \u0022green\u0022, \u0022blue\u0022, \u0022yellow\u0022}\u003B\u000A    for(const auto\u0026amp\u003B color : colors | view::reverse) {\u000A        std::cout \u0026lt\u003B\u0026lt\u003B color \u0026lt\u003B\u0026lt\u003B std::endl\u003B\u000A    }\u000A}\u000A\u003C/code\u003E\u003C/pre\u003E\u000A\u003Cp\u003E这里使用了 range\u002Dv3 的 view 组合，类似 unix pipe 的语法。\u003C/p\u003E\u000A\u003Ch2\u003Eforeach 带下标\u003C/h2\u003E\u000A\u003Cp\u003EPython 版本\u003C/p\u003E\u000A\u003Cpre\u003E\u003Ccode\u003Eimport unittest\u000A\u000Aclass Test(unittest.TestCase):\u000A    def test_foreach_with_index(self):\u000A        colors \u003D [\u0027red\u0027, \u0027green\u0027, \u0027blue\u0027, \u0027yellow\u0027]\u000A        for i, color in enumerate(colors):\u000A            print(i, color)\u000A\u003C/code\u003E\u003C/pre\u003E\u000A\u003Cp\u003EC++ 版本\u003C/p\u003E\u000A\u003Cpre\u003E\u003Ccode\u003E#include \u0026lt\u003Bcatch_with_main.hpp\u0026gt\u003B\u000A#include \u0026lt\u003Brange/v3/all.hpp\u0026gt\u003B\u000A\u000Ausing namespace ranges\u003B\u000A\u000ATEST_CASE(\u0022foreach with index\u0022) {\u000A    auto colors \u003D std::vector\u0026lt\u003Bconst char*\u0026gt\u003B{\u0022red\u0022, \u0022green\u0022, \u0022blue\u0022, \u0022yellow\u0022}\u003B\u000A    for(const auto\u0026amp\u003B [i, color] : view::zip(view::iota(0), colors)) {\u000A        std::cout \u0026lt\u003B\u0026lt\u003B i \u0026lt\u003B\u0026lt\u003B \u0022 \u0022 \u0026lt\u003B\u0026lt\u003B color \u0026lt\u003B\u0026lt\u003B std::endl\u003B\u000A    }\u000A}\u000A\u003C/code\u003E\u003C/pre\u003E\u000A\u003Cp\u003E\u003Ccode\u003Eview::iota\u003C/code\u003E这个的意思是产生一个从 n 开始的逐个加一的 view ，类似 python 里的 generator 。然后 zip 是把两个 view 逐个对应起来合并成一个 pair 的 view 。\u000A然后\u003Ccode\u003Econst auto\u0026amp\u003B [i, color]\u003C/code\u003E是 c++ 17 的 structured bindings 的写法，和 python 解开 tuple 里的元素的做法是如出一辙的。\u003C/p\u003E\u000A\u003Ch2\u003Ezip\u003C/h2\u003E\u000A\u003Cp\u003E下面这个例子可以看得更清楚。 Python 版本\u003C/p\u003E\u000A\u003Cpre\u003E\u003Ccode\u003Eimport unittest\u000Aimport itertools\u000A\u000Aclass Test(unittest.TestCase):\u000A    def test_zip(self):\u000A        names \u003D [\u0027raymond\u0027, \u0027rachel\u0027, \u0027matthew\u0027]\u000A        colors \u003D [\u0027red\u0027, \u0027green\u0027, \u0027blue\u0027, \u0027yellow\u0027]\u000A        for name, color in itertools.izip(names, colors):\u000A            print(name, color)\u000A\u003C/code\u003E\u003C/pre\u003E\u000A\u003Cp\u003Eizip 返回的是 generator 。 zip 返回都是 list 。 C++ 版本\u003C/p\u003E\u000A\u003Cpre\u003E\u003Ccode\u003E#include \u0026lt\u003Bcatch_with_main.hpp\u0026gt\u003B\u000A#include \u0026lt\u003Brange/v3/all.hpp\u0026gt\u003B\u000A\u000Ausing namespace ranges\u003B\u000A\u000ATEST_CASE(\u0022zip\u0022) {\u000A    auto names \u003D std::vector\u0026lt\u003Bconst char*\u0026gt\u003B{\u0022raymond\u0022, \u0022rachel\u0022, \u0022matthew\u0022}\u003B\u000A    auto colors \u003D std::vector\u0026lt\u003Bconst char*\u0026gt\u003B{\u0022red\u0022, \u0022green\u0022, \u0022blue\u0022, \u0022yellow\u0022}\u003B\u000A    for(const auto\u0026amp\u003B [name, color] : view::zip(names, colors)) {\u000A        std::cout \u0026lt\u003B\u0026lt\u003B name \u0026lt\u003B\u0026lt\u003B \u0022 \u0022 \u0026lt\u003B\u0026lt\u003B color \u0026lt\u003B\u0026lt\u003B std::endl\u003B\u000A    }\u000A}\u000A\u003C/code\u003E\u003C/pre\u003E\u000A\u003Ch2\u003Esorted\u003C/h2\u003E\u000A\u003Cp\u003EPython 版本\u003C/p\u003E\u000A\u003Cpre\u003E\u003Ccode\u003Eimport unittest\u000A\u000Aclass Test(unittest.TestCase):\u000A    def test_sort(self):\u000A        colors \u003D [\u0027red\u0027, \u0027green\u0027, \u0027blue\u0027, \u0027yellow\u0027]\u000A        for color in sorted(colors):\u000A            print(color)\u000A\u003C/code\u003E\u003C/pre\u003E\u000A\u003Cp\u003EC++ 版本\u003C/p\u003E\u000A\u003Cpre\u003E\u003Ccode\u003E#include \u0026lt\u003Bcatch_with_main.hpp\u0026gt\u003B\u000A#include \u0026lt\u003Brange/v3/all.hpp\u0026gt\u003B\u000A\u000Ausing namespace ranges\u003B\u000A\u000ATEST_CASE(\u0022sort\u0022) {\u000A    auto colors \u003D std::vector\u0026lt\u003Bstd::string\u0026gt\u003B{\u0022red\u0022, \u0022green\u0022, \u0022blue\u0022, \u0022yellow\u0022}\u003B\u000A    colors |\u003D action::sort\u003B\u000A    for(const auto\u0026amp\u003B color : colors) {\u000A        std::cout \u0026lt\u003B\u0026lt\u003B color \u0026lt\u003B\u0026lt\u003B std::endl\u003B\u000A    }\u000A}\u000A\u003C/code\u003E\u003C/pre\u003E\u000A\u003Cp\u003E这个例子里\u003Ccode\u003Econst char*\u003C/code\u003E换成了\u003Ccode\u003Estd::string\u003C/code\u003E，因为只有字符串类型才知道怎么比较，才能排序。\u000A\u003Ccode\u003Eaction::sort\u003C/code\u003E与 view 不同，它返回的是具体的 container ，而不再是 view 了。\u003C/p\u003E\u000A\u003Cp\u003E如果要倒过来排序，再 python 中是这样的\u003C/p\u003E\u000A\u003Cpre\u003E\u003Ccode\u003Eimport unittest\u000A\u000Aclass Test(unittest.TestCase):\u000A    def test_sort_reverse(self):\u000A        colors \u003D [\u0027red\u0027, \u0027green\u0027, \u0027blue\u0027, \u0027yellow\u0027]\u000A        for color in sorted(colors, reverse\u003DTrue):\u000A            print(color)\u000A\u003C/code\u003E\u003C/pre\u003E\u000A\u003Cp\u003EC++ 版本\u003C/p\u003E\u000A\u003Cpre\u003E\u003Ccode\u003E#include \u0026lt\u003Bcatch_with_main.hpp\u0026gt\u003B\u000A#include \u0026lt\u003Brange/v3/all.hpp\u0026gt\u003B\u000A\u000Ausing namespace ranges\u003B\u000A\u000ATEST_CASE(\u0022sort reverse\u0022) {\u000A    auto colors \u003D std::vector\u0026lt\u003Bstd::string\u0026gt\u003B{\u0022red\u0022, \u0022green\u0022, \u0022blue\u0022, \u0022yellow\u0022}\u003B\u000A    colors |\u003D action::sort(std::greater\u0026lt\u003Bstd::string\u0026gt\u003B())\u003B\u000A    for(const auto\u0026amp\u003B color : colors) {\u000A        std::cout \u0026lt\u003B\u0026lt\u003B color \u0026lt\u003B\u0026lt\u003B std::endl\u003B\u000A    }\u000A}\u000A\u003C/code\u003E\u003C/pre\u003E\u000A\u003Cp\u003EPython 还支持指定属性去排序\u003C/p\u003E\u000A\u003Cpre\u003E\u003Ccode\u003Eimport unittest\u000A\u000Aclass Test(unittest.TestCase):\u000A\u000A    def test_custom_sort(self):\u000A        colors \u003D [\u0027red\u0027, \u0027green\u0027, \u0027blue\u0027, \u0027yellow\u0027]\u000A        for color in sorted(colors, key\u003Dlambda e: len(e)):\u000A            print(color)\u000A\u003C/code\u003E\u003C/pre\u003E\u000A\u003Cp\u003EC++ 版本\u003C/p\u003E\u000A\u003Cpre\u003E\u003Ccode\u003E#include \u0026lt\u003Bcatch_with_main.hpp\u0026gt\u003B\u000A#include \u0026lt\u003Brange/v3/all.hpp\u0026gt\u003B\u000A\u000Ausing namespace ranges\u003B\u000A\u000ATEST_CASE(\u0022custom sort\u0022) {\u000A    auto colors \u003D std::vector\u0026lt\u003Bstd::string\u0026gt\u003B{\u0022red\u0022, \u0022green\u0022, \u0022blue\u0022, \u0022yellow\u0022}\u003B\u000A    colors |\u003D action::sort(std::less\u0026lt\u003Bstd::string\u0026gt\u003B(), [](const auto\u0026amp\u003Be) {\u000A        return e.size()\u003B\u000A    })\u003B\u000A    for(const auto\u0026amp\u003B color : colors) {\u000A        std::cout \u0026lt\u003B\u0026lt\u003B color \u0026lt\u003B\u0026lt\u003B std::endl\u003B\u000A    }\u000A}\u000A\u003C/code\u003E\u003C/pre\u003E\u000A\u003Cp\u003E\u003Ccode\u003Esort\u003C/code\u003E的第一个参数是 comparator ，第二个参数是 projector 。这里我们使用了一个 lambda 表达式，从字符串上取得其长度值，用长度去排序。\u003C/p\u003E\u000A\u003Chr\u003E\u000A\u003Cp\u003E需要的编译环境\u003C/p\u003E\u000A\u003Cul\u003E\u000A\u003Cli\u003E操作系统: ubuntu 14.04\u003C/li\u003E\u000A\u003Cli\u003E编译器 clang 4.0: \u003Ca href\u003D\u0022http://apt.llvm.org/\u0022 rel\u003D\u0022nofollow\u0022\u003Ehttp://apt.llvm.org/\u003C/a\u003E 使用 c++ 17\u003C/li\u003E\u000A\u003Cli\u003Ecmake: sudo apt\u002Dget install cmake\u003C/li\u003E\u000A\u003Cli\u003E包管理: git clone 依赖到自己的 repository ，所谓 vendoring\u003C/li\u003E\u000A\u003Cli\u003EIDE clion ： \u003Ca href\u003D\u0022https://www.jetbrains.com/clion/\u0022 rel\u003D\u0022nofollow\u0022\u003Ehttps://www.jetbrains.com/clion/\u003C/a\u003E\u003C/li\u003E\u000A\u003Cli\u003ESTL: libc++ 3.9\u003C/li\u003E\u000A\u003Cli\u003Erange\u002Dv3\u003C/li\u003E\u000A\u003C/ul\u003E\u000A\u003Cp\u003E参见： \u003Ca href\u003D\u0022https://taowen.gitbooks.io/modern\u002Dcpp\u002Dhowto/content/unit\u002Dtesting/chapter.html\u0022 rel\u003D\u0022nofollow\u0022\u003Ehttps://taowen.gitbooks.io/modern\u002Dcpp\u002Dhowto/content/unit\u002Dtesting/chapter.html\u003C/a\u003E\u003C/p\u003E\u000A",
        "replies" : 41,
        "member" : {
            "id" : 45858,
            "username" : "taowen",
            "tagline" : "",
            "avatar_mini" : "//cdn.v2ex.co/avatar/ce10/b998/45858_mini.png?m=1449298769",
            "avatar_normal" : "//cdn.v2ex.co/avatar/ce10/b998/45858_normal.png?m=1449298769",
            "avatar_large" : "//cdn.v2ex.co/avatar/ce10/b998/45858_large.png?m=1449298769"
        },
        "node" : {
            "id" : 90,
            "name" : "python",
            "title" : "Python",
            "title_alternative" : "Python",
            "url" : "http://www.v2ex.com/go/python",
            "topics" : 5504,
            "avatar_mini" : "//cdn.v2ex.co/navatar/8613/985e/90_mini.png?m=1471552019",
            "avatar_normal" : "//cdn.v2ex.co/navatar/8613/985e/90_normal.png?m=1471552019",
            "avatar_large" : "//cdn.v2ex.co/navatar/8613/985e/90_large.png?m=1471552019"
        },
        "created" : 1472301325,
        "last_modified" : 1472301325,
        "last_touched" : 1472349607
    },
    
    {
        "id" : 302126,
        "title" : "互联网公司停电吗？",
        "url" : "http://www.v2ex.com/t/302126",
        "content" : "",
        "content_rendered" : "",
        "replies" : 37,
        "member" : {
            "id" : 113080,
            "username" : "cc7756789",
            "tagline" : "...",
            "avatar_mini" : "//cdn.v2ex.co/avatar/b73d/d7aa/113080_mini.png?m=1440127321",
            "avatar_normal" : "//cdn.v2ex.co/avatar/b73d/d7aa/113080_normal.png?m=1440127321",
            "avatar_large" : "//cdn.v2ex.co/avatar/b73d/d7aa/113080_large.png?m=1440127321"
        },
        "node" : {
            "id" : 300,
            "name" : "programmer",
            "title" : "程序员",
            "title_alternative" : "Programmer",
            "url" : "http://www.v2ex.com/go/programmer",
            "topics" : 13019,
            "avatar_mini" : "//cdn.v2ex.co/navatar/94f6/d7e0/300_mini.png?m=1472189973",
            "avatar_normal" : "//cdn.v2ex.co/navatar/94f6/d7e0/300_normal.png?m=1472189973",
            "avatar_large" : "//cdn.v2ex.co/navatar/94f6/d7e0/300_large.png?m=1472189973"
        },
        "created" : 1472277309,
        "last_modified" : 1472277331,
        "last_touched" : 1472350650
    },
    
    {
        "id" : 302196,
        "title" : "亲手打造：一个简单好用的免费图床 —— Fotokl",
        "url" : "http://www.v2ex.com/t/302196",
        "content" : "## 尽情体验吧： https://www.fotokl.com\u000D\u000A## 全球 CDN 分发哦~ 支持 HTTPS 哦~\u000D\u000A\u000D\u000A### 名称由来：\u000D\u000A \u002D \u0022Foto\u0022 由 英语单词 \u0022Photo\u0022 变化得来\u000D\u000A \u002D \u0022kl\u0022 可以理解成 英语单词 \u0022Cool\u0022 的变化，也可以是汉字 \u0022库\u0022 发音\u000D\u000A \u002D 因为大部分 .com 域名注册不到，于是，原本简单的“**图片库**”含义，就被我变化成了这么个怪名\u000D\u000A\u000D\u000A### 截图：图片上传页面\u000D\u000A![1]( https://i.bohan.co/z1MnEYrG.png)\u000D\u000A### 截图：图片浏览页面\u000D\u000A![2]( https://i.bohan.co/PXr2J5rB.png)\u000D\u000A\u000D\u000A### 这个网站使用了：\u000D\u000A \u002D Hugo (作为最终的静态 HTML 生成器)\u000D\u000A \u002D LeanCloud (后端数据库 + 用户系统)\u000D\u000A \u002D Node.js (写后端逻辑，部署在 LeanEngine 上，但并不生成 HTML)\u000D\u000A \u002D 七牛云存储 (对象存储及 CDN 服务)\u000D\u000A\u000D\u000A### 最后：\u000D\u000A\u000D\u000A我只是个大一仔，也不是学计算机的，做网页应用是自己的爱好。\u000D\u000A\u000D\u000A可能有很多小问题，或者功能不全面，大家尽管提。\u000D\u000A\u000D\u000A这个程序以后打算开源，让大家部署自己的图床。\u000D\u000A\u000D\u000A多谢大家！",
        "content_rendered" : "\u003Ch2\u003E尽情体验吧： \u003Ca href\u003D\u0022https://www.fotokl.com\u0022 rel\u003D\u0022nofollow\u0022\u003Ehttps://www.fotokl.com\u003C/a\u003E\u003C/h2\u003E\u000A\u003Ch2\u003E全球 CDN 分发哦~ 支持 HTTPS 哦~\u003C/h2\u003E\u000A\u003Ch3\u003E名称由来：\u003C/h3\u003E\u000A\u003Cul\u003E\u000A\u003Cli\u003E\u0022Foto\u0022 由 英语单词 \u0022Photo\u0022 变化得来\u003C/li\u003E\u000A\u003Cli\u003E\u0022kl\u0022 可以理解成 英语单词 \u0022Cool\u0022 的变化，也可以是汉字 \u0022库\u0022 发音\u003C/li\u003E\u000A\u003Cli\u003E因为大部分 .com 域名注册不到，于是，原本简单的“\u003Cstrong\u003E图片库\u003C/strong\u003E”含义，就被我变化成了这么个怪名\u003C/li\u003E\u000A\u003C/ul\u003E\u000A\u003Ch3\u003E截图：图片上传页面\u003C/h3\u003E\u000A\u003Cp\u003E\u003Cimg alt\u003D\u00221\u0022 src\u003D\u0022https://i.bohan.co/z1MnEYrG.png\u0022\u003E\u003C/p\u003E\u000A\u003Ch3\u003E截图：图片浏览页面\u003C/h3\u003E\u000A\u003Cp\u003E\u003Cimg alt\u003D\u00222\u0022 src\u003D\u0022https://i.bohan.co/PXr2J5rB.png\u0022\u003E\u003C/p\u003E\u000A\u003Ch3\u003E这个网站使用了：\u003C/h3\u003E\u000A\u003Cul\u003E\u000A\u003Cli\u003EHugo (作为最终的静态 HTML 生成器)\u003C/li\u003E\u000A\u003Cli\u003ELeanCloud (后端数据库 + 用户系统)\u003C/li\u003E\u000A\u003Cli\u003ENode.js (写后端逻辑，部署在 LeanEngine 上，但并不生成 HTML)\u003C/li\u003E\u000A\u003Cli\u003E七牛云存储 (对象存储及 CDN 服务)\u003C/li\u003E\u000A\u003C/ul\u003E\u000A\u003Ch3\u003E最后：\u003C/h3\u003E\u000A\u003Cp\u003E我只是个大一仔，也不是学计算机的，做网页应用是自己的爱好。\u003C/p\u003E\u000A\u003Cp\u003E可能有很多小问题，或者功能不全面，大家尽管提。\u003C/p\u003E\u000A\u003Cp\u003E这个程序以后打算开源，让大家部署自己的图床。\u003C/p\u003E\u000A\u003Cp\u003E多谢大家！\u003C/p\u003E\u000A",
        "replies" : 33,
        "member" : {
            "id" : 70639,
            "username" : "isCyan",
            "tagline" : "",
            "avatar_mini" : "//cdn.v2ex.co/avatar/3e97/f6b6/70639_mini.png?m=1455551447",
            "avatar_normal" : "//cdn.v2ex.co/avatar/3e97/f6b6/70639_normal.png?m=1455551447",
            "avatar_large" : "//cdn.v2ex.co/avatar/3e97/f6b6/70639_large.png?m=1455551447"
        },
        "node" : {
            "id" : 17,
            "name" : "create",
            "title" : "分享创造",
            "title_alternative" : "Create",
            "url" : "http://www.v2ex.com/go/create",
            "topics" : 6036,
            "avatar_mini" : "//cdn.v2ex.co/navatar/70ef/df2e/17_mini.png?m=1471552248",
            "avatar_normal" : "//cdn.v2ex.co/navatar/70ef/df2e/17_normal.png?m=1471552248",
            "avatar_large" : "//cdn.v2ex.co/navatar/70ef/df2e/17_large.png?m=1471552248"
        },
        "created" : 1472310952,
        "last_modified" : 1472311457,
        "last_touched" : 1472354302
    },
    
    {
        "id" : 302174,
        "title" : "路由器盲流求教：一款强大的路由器都能干些什么有趣的事？",
        "url" : "http://www.v2ex.com/t/302174",
        "content" : "一直以来因为没什么需求，我还在用着好多年前 50 块钱的水星入门级别产品，对我来说路由无非就是一个 WIFI 发射器。\u000D\u000A\u000D\u000A最近看到有人说高端路由可以挂移动硬盘成为局域网内的文件服务器，顿时来了兴趣，经常在卧室内用移动数据看片都是直接用 SMB 访问电脑硬盘里的文件。如果有这样的路由就不用开着电脑了。\u000D\u000A\u000D\u000A去京东看了一些华硕的高端产品页面，眼花缭乱的功能，还有个什么下载大师可以不开机下载，这又是怎么做到？因为网络这一块常年都是小白，请大家指教下。一块千元级别的路由除了信号强大以外还能做些什么？",
        "content_rendered" : "一直以来因为没什么需求，我还在用着好多年前 50 块钱的水星入门级别产品，对我来说路由无非就是一个 WIFI 发射器。\u000D\u003Cbr /\u003E\u000D\u003Cbr /\u003E最近看到有人说高端路由可以挂移动硬盘成为局域网内的文件服务器，顿时来了兴趣，经常在卧室内用移动数据看片都是直接用 SMB 访问电脑硬盘里的文件。如果有这样的路由就不用开着电脑了。\u000D\u003Cbr /\u003E\u000D\u003Cbr /\u003E去京东看了一些华硕的高端产品页面，眼花缭乱的功能，还有个什么下载大师可以不开机下载，这又是怎么做到？因为网络这一块常年都是小白，请大家指教下。一块千元级别的路由除了信号强大以外还能做些什么？",
        "replies" : 31,
        "member" : {
            "id" : 13615,
            "username" : "Air_Mu",
            "tagline" : "",
            "avatar_mini" : "//cdn.v2ex.co/avatar/f334/c476/13615_mini.png?m=1335107654",
            "avatar_normal" : "//cdn.v2ex.co/avatar/f334/c476/13615_normal.png?m=1335107654",
            "avatar_large" : "//cdn.v2ex.co/avatar/f334/c476/13615_large.png?m=1335107654"
        },
        "node" : {
            "id" : 12,
            "name" : "qna",
            "title" : "问与答",
            "title_alternative" : "Questions and Answers",
            "url" : "http://www.v2ex.com/go/qna",
            "topics" : 74961,
            "avatar_mini" : "//cdn.v2ex.co/navatar/c20a/d4d7/12_mini.png?m=1471551823",
            "avatar_normal" : "//cdn.v2ex.co/navatar/c20a/d4d7/12_normal.png?m=1471551823",
            "avatar_large" : "//cdn.v2ex.co/navatar/c20a/d4d7/12_large.png?m=1471551823"
        },
        "created" : 1472299743,
        "last_modified" : 1472299766,
        "last_touched" : 1472352407
    },
    
    {
        "id" : 302210,
        "title" : "突然腰疼的厉害，求缓解办法。",
        "url" : "http://www.v2ex.com/t/302210",
        "content" : "今天晚上蹲着弄了一会电脑，现在腰疼的特别厉害，躺着活着趴着都疼，无法睡觉了。求缓解办法。",
        "content_rendered" : "今天晚上蹲着弄了一会电脑，现在腰疼的特别厉害，躺着活着趴着都疼，无法睡觉了。求缓解办法。",
        "replies" : 31,
        "member" : {
            "id" : 143564,
            "username" : "billion",
            "tagline" : "给时光以生命。",
            "avatar_mini" : "//cdn.v2ex.co/avatar/276e/3dd4/143564_mini.png?m=1445385546",
            "avatar_normal" : "//cdn.v2ex.co/avatar/276e/3dd4/143564_normal.png?m=1445385546",
            "avatar_large" : "//cdn.v2ex.co/avatar/276e/3dd4/143564_large.png?m=1445385546"
        },
        "node" : {
            "id" : 300,
            "name" : "programmer",
            "title" : "程序员",
            "title_alternative" : "Programmer",
            "url" : "http://www.v2ex.com/go/programmer",
            "topics" : 13019,
            "avatar_mini" : "//cdn.v2ex.co/navatar/94f6/d7e0/300_mini.png?m=1472189973",
            "avatar_normal" : "//cdn.v2ex.co/navatar/94f6/d7e0/300_normal.png?m=1472189973",
            "avatar_large" : "//cdn.v2ex.co/navatar/94f6/d7e0/300_large.png?m=1472189973"
        },
        "created" : 1472314614,
        "last_modified" : 1472314614,
        "last_touched" : 1472353472
    },
    
    {
        "id" : 302122,
        "title" : "写程序真是一项省钱的爱好",
        "url" : "http://www.v2ex.com/t/302122",
        "content" : "有台破电脑就可以玩了，门槛相当低。相比之下，很多爱好简直就是土豪们的烧钱游戏，入坑了以后，买买买的冲动根本停不下来…\u000D\u000A\u000D\u000A[知乎 \u002D 有一项烧钱的爱好是什么体验？ ]( http://www.zhihu.com/question/31777050)",
        "content_rendered" : "\u003Cp\u003E有台破电脑就可以玩了，门槛相当低。相比之下，很多爱好简直就是土豪们的烧钱游戏，入坑了以后，买买买的冲动根本停不下来…\u003C/p\u003E\u000A\u003Cp\u003E\u003Ca href\u003D\u0022http://www.zhihu.com/question/31777050\u0022 rel\u003D\u0022nofollow\u0022\u003E知乎 \u002D 有一项烧钱的爱好是什么体验？ \u003C/a\u003E\u003C/p\u003E\u000A",
        "replies" : 30,
        "member" : {
            "id" : 125986,
            "username" : "Arnie97",
            "tagline" : "",
            "avatar_mini" : "//cdn.v2ex.co/gravatar/607ed64cbd8e7a4cc2035a865b6cb5b2?s=24&d=retro",
            "avatar_normal" : "//cdn.v2ex.co/gravatar/607ed64cbd8e7a4cc2035a865b6cb5b2?s=48&d=retro",
            "avatar_large" : "//cdn.v2ex.co/gravatar/607ed64cbd8e7a4cc2035a865b6cb5b2?s=73&d=retro"
        },
        "node" : {
            "id" : 59,
            "name" : "random",
            "title" : "随想",
            "title_alternative" : "Random",
            "url" : "http://www.v2ex.com/go/random",
            "topics" : 1574,
            "avatar_mini" : "//cdn.v2ex.co/navatar/093f/65e0/59_mini.png?m=1431019484",
            "avatar_normal" : "//cdn.v2ex.co/navatar/093f/65e0/59_normal.png?m=1431019484",
            "avatar_large" : "//cdn.v2ex.co/navatar/093f/65e0/59_large.png?m=1431019484"
        },
        "created" : 1472275828,
        "last_modified" : 1472275828,
        "last_touched" : 1472317307
    }
    
]